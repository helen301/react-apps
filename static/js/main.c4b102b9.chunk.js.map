{"version":3,"sources":["recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","a","fetch","response","json","data","hits","console","log","getRecipes","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iQAsBeA,EAlBA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,YAEnC,OACG,sBAAKC,UAAWC,IAAMC,OAAtB,UACG,6BAAKN,IACL,6BACIG,EAAYI,KAAI,SAAAC,GAAU,OACxB,6BAAKA,EAAWC,YAGtB,4BAAIR,IACJ,qBAAKG,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,SC8CvCC,G,MAxDH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,WAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAUhBC,qBAAU,YACQ,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCJ,EAApC,mBAVjB,WAUiB,oBAThB,qCAQK,cACXK,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBV,EAAWU,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAMhBG,KACC,CAACX,IAiBJ,OACE,sBAAKd,UAAU,MAAf,UACE,uBAAM0B,SAXQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAQmBb,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAa6B,KAAK,OAAOC,MAAOlB,EAAQmB,SAhB1C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAgBf,wBAAQ9B,UAAU,gBAAgB6B,KAAK,SAAvC,uBAEF,sBAAK7B,UAAU,UAAf,UACGU,EAAQP,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAEEN,MAAOM,EAAOA,OAAO+B,MACrBpC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,aAJtBG,EAAOA,OAAO+B,UAHzB,YClCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.c4b102b9.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\n\r\nconst Recipe = ({title,calories,image,ingredients}) => {\r\n\r\n   return (\r\n      <div className={style.recipe}>\r\n         <h1>{title}</h1>\r\n         <ol>\r\n            {ingredients.map(ingredient => (\r\n               <li>{ingredient.text}</li>\r\n            ))}\r\n         </ol>\r\n         <p>{calories}</p>\r\n         <img className={style.image} src={image} alt=\"\"></img>\r\n      </div>\r\n   );\r\n\r\n};\r\n\r\n\r\nexport default Recipe;","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./recipe\";\nimport './App.css';\n\n\nconst App = () => {\n\n  const APP_ID = \"efb0e118\";\n  const APP_KEY = \"21758bffa5a95f54e0e33100fc4cf1b0\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState('Chicken');\n\n\n  useEffect(() => {\n    const getRecipes = async () => {\n      const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n      const data = await response.json();\n      setRecipes(data.hits);\n      console.log(data.hits);\n    };\n    getRecipes();\n  }, [query]);\n\n\n\n  const UpdateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  };\n\n\n\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={UpdateSearch} />\n        <button className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))};\n       </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3_GR2\",\"image\":\"recipe_image__1rJZm\"};"],"sourceRoot":""}